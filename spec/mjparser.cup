package rs.ac.bg.etf.pp1;

import java_cup.runtime.*;
import org.apache.log4j.*;

// import java.io.*;
import rs.ac.bg.etf.pp1.ast.*;


parser code {:
	
	boolean errorDetected = false;
	
	Logger log = Logger.getLogger(getClass());
   
   
    // slede redefinisani metodi za prijavu gresaka radi izmene teksta poruke
     
    public void report_fatal_error(String message, Object info) throws java.lang.Exception {
      done_parsing();
      report_error(message, info);
    }
  
    public void syntax_error(Symbol cur_token) {
        report_error("\nSintaksna greska", cur_token);
    }
  
    public void unrecovered_syntax_error(Symbol cur_token) throws java.lang.Exception {
        report_fatal_error("Fatalna greska, parsiranje se ne moze nastaviti", cur_token);
    }

    public void report_error(String message, Object info) {
    	errorDetected = true;
    	StringBuilder msg = new StringBuilder(message); 
    	if (info instanceof Symbol)
            msg.append (" na liniji ").append(((Symbol)info).left);
        log.error(msg.toString());
    }
    
    public void report_info(String message, Object info) {
    	StringBuilder msg = new StringBuilder(message); 
    	if (info instanceof Symbol)
            msg.append (" na liniji ").append(((Symbol)info).left);
        log.info(msg.toString());
    }
    
:}

scan with {:
	Symbol s = this.getScanner().next_token();
	if (s != null && s.value != null) 
		log.info(s.toString() + " " + s.value.toString());
	return s;
:}


terminal PROG, LBRACE, RBRACE, SEMI, LPAREN, RPAREN, COMMA, PRINT, RETURN, PLUS, EQUAL, VOID;
terminal IF, ELSE, WHILE, NEW, READ, BREAK, CLASS, CONST, EXTENDS, CONTINUE, FOREACH;
terminal MINUS, MULT, DIV, MOD, EQEQ, NOTEQ, GT, GTEQ, LT, LTEQ, AND, OR, INCREMENT, DECREMENT;
terminal COLON, DOT, LBRACKET, RBRACKET, ARROW;

terminal FINDANY, FINDANDREPLACE;
terminal Boolean BOOLCONST;
terminal String CHARCONST;
terminal Integer NUMBER ;
terminal String IDENT ;

nonterminal Label, Assignop, Relop, Addop, Mulop;

nonterminal Program, ProgramName, ConstVarDeclList, MethodDeclList; 
nonterminal ConstVarDecl, ConstDecl, VarDecl, VarDeclList;
nonterminal Type, OneOfNumCharBoolConst, ZeroOrManyNumCharBoolConst;
nonterminal OneOfVarDecl, ZeroOrManyVarDecl;
nonterminal MethodDecl, OptionalParams, MoreParams, Parameter, StatementList, Statement, MatchedStatement, UnmatchedStatement, DesignatorStatement;
nonterminal Condition, NumConstList;
nonterminal OptionalActPars, OptionalActParsOneOrMany;
nonterminal CondTerm, CondFact, OptionalMinus, ElseStatement;
nonterminal MethodName, ReturnType;
nonterminal rs.etf.pp1.symboltable.concepts.Struct Factor, Term, Expr;
nonterminal rs.etf.pp1.symboltable.concepts.Obj Designator;
precedence left ELSE;

/*
    Program = "program" ident {ConstDecl | VarDecl | ClassDecl } "{" {MethodDecl} "}".
*/

Program ::= (Program) PROG ProgramName ConstVarDeclList LBRACE MethodDeclList RBRACE;

ProgramName ::= (ProgramName) IDENT;

Type ::= (Type) IDENT;

ConstVarDeclList ::= (ConstVarDecl_Multiple) ConstVarDeclList ConstVarDecl
                   | (EmptyConstVarDeclList_None) /* epsilon */;

ConstVarDecl ::= (ConstDecl_Single) ConstDecl
                | (VarDecl_Single) VarDecl;

/*
    ConstDecl = "const" Type ident"="(numConst | charConst | boolConst) {, ident "=" (numConst |
charConst | boolConst)} ";"
*/

ConstDecl ::= (ConstDecl) CONST Type OneOfNumCharBoolConst ZeroOrManyNumCharBoolConst SEMI;

OneOfNumCharBoolConst ::= (NumConst_Single) IDENT Assignop NUMBER
                        | (CharConst_Single) IDENT Assignop CHARCONST
                        | (BoolConst_Single) IDENT Assignop BOOLCONST;

ZeroOrManyNumCharBoolConst ::= (NumCharBoolConst_Multiple) ZeroOrManyNumCharBoolConst COMMA OneOfNumCharBoolConst 
                             | (NumCharBoolConst_None) /* epsilon */;

/*
    VarDecl = Type ident ["[" "]"] {"," ident ["[" "]"]} ";"
*/

VarDecl ::= (VarDecl_OneOrMany) Type OneOfVarDecl ZeroOrManyVarDecl SEMI;

VarDeclList ::= (VarDeclList_Multiple) VarDeclList VarDecl
              | (VarDeclList_None) /* epsilon */;

OneOfVarDecl ::= (Var_Single) IDENT
               | (Var_Array) IDENT LBRACKET RBRACKET;

ZeroOrManyVarDecl ::= (Var_Multiple) ZeroOrManyVarDecl COMMA OneOfVarDecl
                    | (Var_None) /* epsilon */;

/*
    MethodDecl = (Type | "void") ident "(" [FormPars] ")" {VarDecl} "{" {Statement} "}"
*/


MethodDeclList ::= (MethodDecl_Multiple) MethodDeclList MethodDecl
                 | (MethodDecl_None) /* epsilon */;


MethodDecl ::= (MethodDecl) ReturnType MethodName LPAREN OptionalParams RPAREN VarDeclList LBRACE StatementList RBRACE;

MethodName ::= (MethodName) IDENT;

ReturnType ::= (ReturnType_Type) Type
             | (ReturnType_Void) VOID;

/*
    FormPars = Type ident ["[" "]"] {"," Type ident ["[" "]"]}.
*/

OptionalParams ::= (OptionalParams_OneOrMany) Parameter MoreParams
             | (OptionalParams_None) /* epsilon */;

MoreParams ::= COMMA Parameter MoreParams
            | /* epsilon */;

Parameter ::= (Param_Single) Type IDENT
            | (Param_Array) Type IDENT LBRACKET RBRACKET;

/*
    Statement = DesignatorStatement ";"
    | Designator ʺ=ʺ Designator ʺ.ʺ ʺfindAnyʺ "(" Expr ")" ";".
    | Designator ʺ=ʺ Designator ʺ.ʺ ʺfindAndReplaceʺ "(" Expr "," ident "=>" Expr ")" ";"
    | "if" "(" Condition ")" Statement ["else" Statement]
    | "while" "(" Condition ")" Statement
    | "break" ";"
    | "continue" ";"
    | "return" [Expr] ";"
    | "read" "(" Designator ")" ";"
    | "print" "(" Expr ["," numConst] ")" ";"
    | "{" {Statement} "}".
    | Designator "." "foreach" "(" ident "=>" Statement ")" ";" * za B i C nivo
*/

StatementList ::= (Statement_Multiple) StatementList Statement
                | (Statement_None) /* epsilon */;

Statement ::= (DesignatorStatement_) DesignatorStatement SEMI |
    (DesignatorFindAnyStatement) Designator Assignop Designator DOT FINDANY LPAREN Expr RPAREN SEMI |
    (DesignatorFindAndReplaceStatement) Designator Assignop Designator DOT FINDANDREPLACE LPAREN Expr COMMA IDENT ARROW Expr RPAREN SEMI |
    (WhileStatement) WHILE LPAREN Condition RPAREN Statement |
    (BreakStatement) BREAK SEMI |
    (ContinueStatement) CONTINUE SEMI |
    (ReturnVoidStatement) RETURN SEMI |
    (ReturnStatement) RETURN Expr SEMI |
    (ReadStatement) READ LPAREN Designator RPAREN SEMI |
    (PrintStatement) PRINT LPAREN Expr NumConstList RPAREN SEMI |
    (ForeachStatement) Designator DOT FOREACH LPAREN IDENT ARROW Statement RPAREN SEMI |
    (BlockStatement) LBRACE StatementList RBRACE |
    (IfStatement) IF LPAREN Condition RPAREN Statement ElseStatement;


ElseStatement ::= (ElseStatement_) ELSE Statement
                | (ElseStatement_None) /* epsilon */;

NumConstList ::= (NumConstList_Multiple) NumConstList COMMA NUMBER
               | (NumConstList_None) /* epsilon */;

/*UnmatchedStatement ::= 
    (UnmatchedIf) IF LPAREN Condition RPAREN Statement |
    (UnmatchedIfElse) IF LPAREN Condition RPAREN MatchedStatement ELSE UnmatchedStatement;
*/
/*
    DesignatorStatement = Designator (Assignop Expr | "(" [ActPars] ")" | "++" | "‐‐")
*/

DesignatorStatement ::= (DesignatorStatement_Assign) Designator Assignop Expr
                      | (DesignatorStatement_Error) error:e 
                        {: 
                            parser.report_error("DesignatorStatement_Error. Line " + eleft, null);
                        :} 
                      | (DesignatorStatement_ActPars) Designator LPAREN OptionalActPars RPAREN
                      | (DesignatorStatement_Increment) Designator INCREMENT
                      | (DesignatorStatement_Decrement) Designator DECREMENT;
/*
    ActPars = Expr {"," Expr}.
*/

OptionalActPars ::= (OptionalActPars_OneOrMany) OptionalActParsOneOrMany
                  | (OptionalActPars_None) /* epsilon */;

OptionalActParsOneOrMany ::= (OptionalActParsOneOrMany_Multiple) OptionalActParsOneOrMany COMMA Expr
                           | (OptionalActParsOneOrMany_Single) Expr;

/*
    Condition = CondTerm {"||" CondTerm}.
*/

Condition ::= (Condition_OneOrMany) Condition OR CondTerm
            | (Condition_Single) CondTerm;

/*
    CondTerm = CondFact {"&&" CondFact}.
*/

CondTerm ::= (CondTerm_OneOrMany) CondTerm AND CondFact
           | (CondTerm_Single) CondFact;

/*
    CondFact = Expr [Relop Expr].
*/

CondFact ::= (CondFact_Expr) Expr
           | (CondFact_ExprRelopExpr) Expr Relop Expr;

/*
    Expr = ["‐"] Term {Addop Term}.
*/

Expr ::= (Expr_Term) Term
       | (Expr_MinusTerm) MINUS Term
       | (Expr_AddopTerm) Expr Addop Term;

OptionalMinus ::= (OptionalMinus_Single) MINUS
                | (OptionalMinus_None) /* epsilon */;

/*
    Term = Factor {Mulop Factor}.
*/

Term ::= (Term_Factor) Factor
       | (Term_MulopFactor) Factor Mulop Term;

/*
    Factor = Designator ["(" [ActPars] ")"]
    | numConst
    | charConst
    | boolConst
    | "new" Type ( "[" Expr "]" | "(" [ActPars] ")" )
    | "(" Expr ")".
*/

Factor ::= (Factor_Designator) Designator
         | (Factor_DesignatorActPars) Designator LPAREN OptionalActPars RPAREN
         | (Factor_NumConst) NUMBER
         | (Factor_CharConst) CHARCONST
         | (Factor_BoolConst) BOOLCONST
         | (Factor_NewArray) NEW Type LBRACKET Expr RBRACKET
         | (Factor_NewObject) NEW Type LPAREN OptionalActPars RPAREN
         | (Factor_Expr) LPAREN Expr RPAREN;

/*
    Designator = ident {"." ident | "[" Expr "]"}.
*/

Designator ::= (Designator_Single) IDENT
             | (Designator_Dot) Designator DOT IDENT
             | (Designator_Array) Designator LBRACKET Expr RBRACKET;

/*
    Label = ident. 
*/

Label ::= (LabelIdent) IDENT;

/*
    Assignop = "="
*/

Assignop ::= (Assign) EQUAL;

/*
    Relop = "==" | "!=" | ">" | ">=" | "<" | "<="
*/

Relop ::= (Equals) EQEQ
       | (NotEqual) NOTEQ
       | (GreaterThan) GT
       | (GreaterThanOrEqual) GTEQ
       | (LessThan) LT
       | (LessThanOrEqual) LTEQ;
/*
    Addop = "+" | "‐".
*/
Addop ::= (Addition) PLUS
      | (Subtraction) MINUS;

/*
    Mulop = "*" | "/" | "%"
*/

Mulop ::= (Multiplication) MULT
      | (Division) DIV
      | (Modulo) MOD;
